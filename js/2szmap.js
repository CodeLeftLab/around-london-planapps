var sz_map_service = "https://maps.london.gov.uk/gla/rest/services/apps/ldd_public_data_service_09/MapServer",szlocator="https://maps.london.gov.uk/gla/rest/services/Locators/GLA_locator_geocode_service_1/GeocodeServer";
var szUseClasses = {"home": {width: 24, height: 22 },  "business": {width: 24, height: 22},  "misc": {width: 24, height: 22},
	"Bedroom Use classes": {icon: "bed", width: 22, height: 27, group: "business"},  "Major Residential": {icon: "home", width: 34, height: 31, group: "home"},
    "Medium Residential": {icon: "home", width: 24, height: 22, group: "home", legend_style: {    "background-size": "16px",     "background-position": "2px 0px" }},
    "Minor Residential": {icon: "home", width: 14, height: 13, group: "home", legend_style: {    "background-size": "12px",     "background-position": "4px 1px"  }},
    "Mixed": {icon: "business", width: 24, height: 22, group: "home"}, "A1 Retail": {icon: "price-tag", width: 25, height: 25, group: "business"},
    "A2 Financial Institutions": {icon: "coins", width: 24, height: 24, group: "business"}, "C2 D1 Non Res Institutions": {icon: "building", width: 24, height: 24, group: "business"},
    "A3 Cafes": {icon: "drink", width: 25, height: 25, group: "business"},  "A4 Drinking est": {icon: "pint-of-beer", width: 24, height: 26, group: "business"},
    /*"A5 Takeaways" : {icon: "business", 	width: 24, 	height: 22,   	group: "business"},*/
    "B1 Office": {icon: "office", width: 26, height: 27, group: "business"},  "B1c B2 B8 Industrial": {icon: "nuclear-plant", width: 25, height: 27, group: "business"},
    "D2 Leisure": {icon: "masks", width: 24, height: 25, group: "business"},   "Marker": {icon: "misc", width: 14, height: 13, group: "misc"},
    "Misc": {icon: "misc", width: 14, height: 13, group: "misc"},  "Open Space": {icon: "forest", width: 26, height: 27, group: "forest"}   }
require(["esri/map", "esri/geometry/Polygon", "esri/dijit/HomeButton", "esri/geometry/geometryEngine", "esri/layers/FeatureLayer", "esri/geometry/Point", "esri/tasks/GeometryService", "esri/symbols/TextSymbol", "esri/symbols/Font", "esri/layers/LabelClass", "esri/dijit/analysis/AggregatePoints", "esri/geometry/screenUtils", "esri/layers/ArcGISDynamicMapServiceLayer", "esri/symbols/SimpleLineSymbol", "esri/symbols/SimpleFillSymbol", "esri/symbols/SimpleMarkerSymbol", "esri/renderers/UniqueValueRenderer", "esri/renderers/ClassBreaksRenderer", "esri/renderers/SimpleRenderer", "esri/Color", "esri/urlUtils", "esri/dijit/Search", "esri/tasks/locator", "esri/dijit/LocateButton", "esri/InfoTemplate", "esri/virtualearth/VETiledLayer", "extras/js/ClusterFeatureLayer", "esri/layers/ArcGISTiledMapServiceLayer", "esri/tasks/query", "esri/geometry/Extent", "esri/dijit/Popup", "esri/tasks/IdentifyTask", "esri/tasks/IdentifyParameters", "esri/graphic", "esri/layers/GraphicsLayer", "esri/symbols/PictureMarkerSymbol", "dojo/json", "esri/geometry/webMercatorUtils", "esri/graphicsUtils", "esri/tasks/QueryTask", "dojo/domReady!" //Added this to maybe fix that random bug
], function( Map, Polygon, HomeButton, geometryEngine, FeatureLayer, Point, GeometryService, TextSymbol, Font, LabelClass, AggregatePoints, screenUtils, ArcGISDynamicMapServiceLayer, SimpleLineSymbol, SimpleFillSymbol, SimpleMarkerSymbol, UniqueValueRenderer, ClassBreaksRenderer, SimpleRenderer, Color, urlUtils, Search, Locator, LocateButton, InfoTemplate, VETiledLayer, ClusterFeatureLayer, ArcGISTiledMapServiceLayer, Query, Extent, Popup, IdentifyTask, IdentifyParameters, Graphic, GraphicsLayer, PictureMarkerSymbol, JSON, webMercatorUtils, graphicsUtils, QueryTask) {/****** Setup variables/config ******/
    var map_service = sz_map_service; var bm, loader_timeout, pre_home_extent, home_timer, last_graphic_hover, last_borough_zoom, last_ward_graphic, last_selected_ward_geom, current_zoom, last_zoom;
    var refreshing_counters=false, last_borough_hover=false, last_context=false, did_zoom=false, has_filters=false, zoomed_in=false, is_borough_zoom=false, loading_borough_elem=false, is_ward_zoom=false, hide_when_zoomed_out = [];
    var saved_queries = {}; var latest_search_id = 0; var zoom_level = "boroughs"; var types = get_types(); var click_event = is_touch_device() ? "mouse-over" : "click";
    /****** Main Code ******/map = create_map(); var locator = new Locator(szlocator);
    var wards = new FeatureLayer(map_service + "/1", {id: "wards", outFields: ["*"],  maxAllowableOffset: pixel_size() / 4,  mode: FeatureLayer.MODE_SELECTION });
    wards.on(click_event, function(e) {ward_click(e.graphic); });
    wards.on("selection-complete", function() {if (last_borough_zoom[1].attributes.name == "City of London") {ward_click(wards.graphics[0]);} else {refresh_counters("wards update-end");}  });
    wards.on("mouse-over", polygon_hover);  wards.setRenderer(new SimpleRenderer(new SimpleFillSymbol("solid", null, null)));
    var boroughs = new FeatureLayer(map_service + "/2", {id: "boroughs", outFields: ["gss_code", "perm_count", "x", "y", "name"],  maxAllowableOffset: pixel_size() / 4, mode: FeatureLayer.MODE_SNAPSHOT });
    boroughs.on(click_event, function(e) {borough_click(e.srcElement, e.graphic, e.graphic.attributes.gss_code);  });
    boroughs.on("mouse-over", function(e) {polygon_hover(e); last_borough_hover = e; });  boroughs.on("update-end", function() {refresh_counters("borough update-end");  check_auto_borough(); });
    var single_ward = new FeatureLayer(map_service + "/1", {id: "single_ward",  visible: false });
    single_ward.on("update-end", function() {if (single_ward.graphics[0]) {last_selected_ward_geom = single_ward.graphics[0].geometry;}  });
    var locations = new FeatureLayer(map_service + "/0", {id: "locations", visible: false, mode: FeatureLayer.MODE_ONDEMAND,
        outFields: ["namenumber", "street", "postcode", "borough", "ward", "apptype", "permissiondate", "status", "permtype", "appref", "description", "mapclass"],
        infoTemplate: new InfoTemplate(function() {}, getTextContent)    });
    locations.setRenderer(make_renderer());  locations.on(click_event, function(evt) { db(evt.graphic.attributes); map.infoWindow.setFeatures([evt.graphic]); map.infoWindow.show(evt.graphic.geometry); });
    locations.on("mouse-over", function(e) { hover_pin(e, true);}); locations.on("mouse-out", function(e) {hover_pin(e, false);}); locations.on("selection-complete", init_export);
    var gla_boundary = create_gla_boundary();  map.addLayers([gla_boundary, single_ward, locations, boroughs, wards]); swal.setDefaults({html: true, allowOutsideClick: true, confirmButtonColor:"#9E0059",html: true});
    hash = setup_hash();  transparency = create_transparency_control("#transparency_holder", [boroughs, wards], 0.75, false);  var rainbow = new Rainbow();  rainbow.setSpectrum("yellow", "red");
    /************ Widgets ************/
    var home = new HomeButton({ map: map }, "HomeButton");  home.startup(); map.on("extent-change", function(e) { if (!(pre_home_extent && e.extent.xmax == pre_home_extent.xmax)) {clearTimeout(home_timer);  pre_home_extent = false;  }  });
    var search_widget = new Search({map: map, enableInfoWindow: false, enableSourcesMenu: false, sourceCountry: "GB", activeSourceIndex: "all",   allPlaceholder: "Find an address",
        sources: [{locator: locator, /*suggestions are broken */ singleLineFieldName: "SingleKey",  countryCode: "UK",  name: "Results Only",   enableSuggestions: false, maxResults: 3, distance: 0,  minCharacters: 1,
			searchExtent: new esri.geometry.Extent(-67560, 6668811, 41438, 6753350, new esri.SpatialReference({wkid: 102100 })), },
            {locator: new Locator("//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer"), //Just for suggestions
            singleLineFieldName: "SingleKey",  countryCode: "UK", name: "London Addresses", enableSuggestions: true,  maxResults: 0, maxSuggestions: 2, distance: 0, minCharacters: 1, searchExtent: new esri.geometry.Extent(-67560, 6668811, 41438, 6753350, new esri.SpatialReference({ wkid: 102100  })),  } ]  }, "search");
    search_widget.on("search-results", function() {minimise()  });   search_widget.startup();
    var is_firefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
    if (!is_firefox) { //Esri's widget doesn't work in Firefox - perhaps needs a mercator wkid?
        geoLocate = new LocateButton({map: map,highlightLocation: false,scale: 16000,theme: "findme" }, "LocateButton");  $(".findme").on("click", function() {show_loader(true);$(this).addClass("searching"); });
        geoLocate.on("locate", function(e) {show_loader(false);$(".findme").removeClass("searching");minimise(); });  geoLocate.startup(); }
    /************ Functions that need accessing outside this code block ************/
    go_home = function() {pre_home_extent = map.extent;clearTimeout(home_timer);home_timer = setTimeout(function() {swal("Already at default location", "This button takes you back to the default view for this map. Try using it when you are zoomed in.");}, 700);home.home(); }
    goto_last_borough = function() {if (last_borough_zoom) {borough_click.apply(this, last_borough_zoom);} }
    goto_last_ward = function() {   if (last_ward_graphic) {zoom_to_graphic(last_ward_graphic);} }
    about_map = function() { /*swal("",  "<div id='swal_content'>Loading...</div>", "info");  $(".sweet-alert #swal_content").load("about.html");*/
        swal("Planning Permission Map", "This map shows the number and location of planning permissions across London as recorded on the London Development Database (LDD) by Londonâ€™s planning authorities. Only permissions meeting specific criteria are recorded. More information can be found <a href='https://www.london.gov.uk/what-we-do/planning/london-plan/london-development-database' target='_blank'>here</a>. <br><br>For information on applications currently being considered, or for refused and withdrawn applications, visit the website of the relevant <a target='_blank' href='https://www.london.gov.uk/what-we-do/planning/who-we-work/borough-webpages'>planning authority</a>.<br><br>The numbers represent the amount of permissions. Zoom into the map to seenumbers by ward and further to see the individual records. Tick one or more of the Project Statuses or Building Types to refine your search, or untick them all to see everything", "info")  }
    if (once_only("auto_about_popup_ldd")) about_map();
    minimise = function(b) {if (!is_mobile()) return;$("body").toggleClass("min", b !== false);hash.update(b !== false ? "map" : "");    }
    clear_filters = function() {$("#lddfilters input:checked").prop("checked", false);$("#context select").val(-1);do_filter(false);setTimeout(context_layers, 1); }
    build_legend = function() {$("#type_groups input").each(function() {var code = $(this).attr("name");    var img_src = types[code].icon || code;    var img = $("<div>").css("background-image", "url(images/icons/" + img_src + ".svg)");if (types[code].legend_style) img.css(types[code].legend_style);    $(this).parent().append(img);});}
    show_advanced = function(b) {$("#type_groups").toggleClass("advanced", b !== false);//if ($("#type_groups input:checked").length!=0) do_filter();
        locations.setRenderer(make_renderer());$("#panel").toggleClass("wider", b);do_filter(); }
    context_opacity = { num: 3,vals: [0.25, 0.5, 0.75, 1], next: function() {var i = (this.current_index() + 1) % this.vals.length;    this.current_index(i);    last_context.setOpacity(this.current_val());},
        current_val: function() {return this.vals[this.current_index()];},   current_index: function(v) {if (v !== undefined) this.num = v; else return this.num;}    }
    clear_context = function() {$("#context select").val(-1);context_layers();}
    context_info = function() {var title = $("#context select option:selected").text();var description = last_context.description;
        if (!description) {if (title == "Opportunity Areas") {    description = "Opportunity Areas are Londonâ€™s major source of brownfield land which have significant capacity for development â€“ such as housing or commercial use - and existing or potentially improved public transport access.";    }   }
        swal(title, description, "info"); }
    do_export = function() {var query = new Query();query.geometry = last_selected_ward_geom;locations.selectFeatures(query, FeatureLayer.SELECTION_NEW); }
    go_back_to_map = function() {$("body").removeClass("showinfo").addClass("min");hash.update("map"); }
    /********** Helper functions **********/
    function pixel_size() {return map.extent.getWidth() / map.width;}  function once_only(name) {if (typeof(Storage) === "undefined" || localStorage.getItem(name)) return false;store(name, 1);return true; }
    function borough_click(elem, graphic, gss_code, no_zoom) {map.graphics.clear();show_loader(true);is_borough_zoom = true;loading_borough(elem);
        var query = new Query();query.where = "lb_gss_cd='" + gss_code + "'";wards.setOpacity(0); $("#borough_picked").html(graphic.attributes.name); last_borough_zoom = [elem, graphic, gss_code];
        if (no_zoom) {wards.selectFeatures(query, FeatureLayer.SELECTION_NEW);} else {zoom_to_graphic(graphic, function() {    wards.selectFeatures(query, FeatureLayer.SELECTION_NEW);        check_zoom_cases("borough click event");    });} }
    function ward_click(g) {is_ward_zoom = g.attributes["objectid_1"];last_ward_graphic = g;$("#ward_picked span").html(g.attributes["name"]);show_loader(false);zoom_to_graphic(g, function() {if (is_ward_zoom) check_zoom_cases();}); }
    function loading_borough(elem) {if (elem) {loading_borough_elem = elem;    $(loading_borough_elem).attr("class", "immune");} else {$(".immune").attr("class", "");    loading_borough_elem = false;} }
    function refresh_counters(i) {if (zoom_level == "points") return; latest_search_id++;var id = latest_search_id; show_loader(true);map.graphics.clear();var query = new Query();
        var search_for = at_borough_level() ? boroughs : wards;var total = search_for.graphics.length,num = 0;var data = {};var max, min;
        if (!has_filters) {
            for (var i in search_for.graphics) {data[i] = search_for.graphics[i].attributes["perm_count"]; if ((!min || data[i] < min) && data[i] !== 0) min = data[i]; if (!max || data[i] > max) max = data[i];    }
            output_counts(data, min, max, search_for, id);} else {var q = get_saved_query();    if (q) {output_counts(q[0], q[1], q[2], search_for, id);} else {
                var key = locations.getDefinitionExpression(); var geom_key = at_borough_level() ? "borough" : last_borough_zoom[2];
                for (var i in search_for.graphics) {(function(i) { var geom = search_for.graphics[i].geometry;
                        //geom = geometryEngine.generalize(geom, 1000, true, "meters"); //This allows borough level geometry to return 304's, i.e. fetch the counts from cache (simplifying geometry means a shorter URL, so can go via GET instead of POST, which allows simple 304 caching
                        query.geometry = geom;
                        locations.queryCount(query, function(count) {data[i] = count; num++;if ((!min || count < min) && count !== 0) min = count;
                            if (!max || count > max) max = count;     if (num == total) { save_queries(data, min, max, key, geom_key);  output_counts(data, min, max, search_for, id); }  }); })(i); } }}}
    function save_queries(data, min, max, key, geom_key) {if (!saved_queries[key]) saved_queries[key] = {}; saved_queries[key][geom_key] = [data, min, max]; store('ldd_queries', saved_queries);}
    function get_saved_query() {var key = locations.getDefinitionExpression(); var geom_key = at_borough_level() ? "borough" : last_borough_zoom[2];
        if (saved_queries[key] && saved_queries[key][geom_key]) {return saved_queries[key][geom_key];} else {return false;}    }
    function output_counts(data, min, max, search_for, id) {if (id != latest_search_id) return;
        var font = new Font(is_mobile() ? "12px" : "17px", Font.STYLE_NORMAL, Font.VARIANT_NORMAL, Font.WEIGHT_BOLDER, "Arial");  var statesLine = new SimpleLineSymbol("solid", new Color("#000000"), 4);
        if (typeof min == 'undefined') min = 0; if (typeof max == 'undefined') max = 0;  if (min == max) max += 0.01;  rainbow.setNumberRange(min, max);  map.graphics.clear();
        for (var i in data) {var colour = !data[i] ? "#eee" : "#" + rainbow.colourAt(data[i]); search_for.graphics[i].setSymbol(new SimpleFillSymbol("solid", statesLine, new Color(colour)));
            var a = search_for.graphics[i].attributes; var geom = new Point(a["x"], a["y"], new esri.SpatialReference({wkid: 3857 }));
            if (data[i]) {var textSymbol = new TextSymbol(data[i], font, new Color([0, 0, 0])); textSymbol.setHorizontalAlignment("center"); textSymbol.setVerticalAlignment("middle");
                var labelPointGraphic = new Graphic(geom, textSymbol); map.graphics.add(labelPointGraphic);} }
        show_loader(false); loading_borough(false); wards.setOpacity(transparency.get()); }
function create_gla_boundary() {var fill=new SimpleFillSymbol(); var gl=new GraphicsLayer({id: "gla"}); gl.setVisibility(false);
if (false) {fill.setColor(new Color("#fff"));/* white background */  fill.setStyle(SimpleFillSymbol.STYLE_SOLID);} else { fill.setStyle(SimpleFillSymbol.STYLE_BACKWARD_DIAGONAL); gl.setOpacity(0.5);}
var rings = [ [ [-634697, 7094687], [310675, 7094687], [310675, 6282620], [-634697, 6282620], [-634697, 7094687]   ],/*square */
[      [-56740, 6704709], [-56514, 6704877], [-56321, 6705299], [-56049, 6706736], [-55515, 6707730], [-55624, 6707865], [-55567, 6708177], [-55471, 6708155], [-55435, 6708231], [-55507, 6708299], [-55287, 6708400], [-55299, 6708518], [-55097, 6708667], [-55142, 6708797], [-55080, 6708910], [-54712, 6708976], [-54595, 6709120], [-54511, 6709402], [-54398, 6709501], [-54488, 6709790], [-54417, 6709958], [-54518, 6710034], [-54407, 6710256], [-54264, 6710282], [-54245, 6710394], [-54120, 6710382], [-54128, 6710545], [-53952, 6710859], [-53995, 6711127], [-53787, 6711408], [-53876, 6711580], [-53824, 6711668], [-54081, 6711972], [-54051, 6712023], [-54523, 6712281], [-54498, 6712737], [-54680, 6712948], [-54806, 6713273], [-54587, 6713827], [-54677, 6714025], [-54575, 6714617], [-54638, 6714949], [-54486, 6715160], [-54432, 6715419], [-54679, 6716171], [-54600, 6716329], [-54917, 6716630], [-55157, 6717115], [-54946, 6717555], [-54745, 6717662], [-54780, 6717813], [-54633, 6718271], [-54721, 6718329], [-54697, 6718471], [-54477, 6718509], [-54492, 6718660], [-54340, 6718705], [-54168, 6719171], [-53904, 6719426], [-53730, 6719438], [-53309, 6720031], [-53179, 6720036], [-53054, 6720603], [-53155, 6721005], [-53559, 6721092], [-53517, 6721274], [-53744, 6721461], [-53683, 6721657], [-53792, 6721876], [-53720, 6721981], [-53962, 6722181], [-53880, 6722960], [-54049, 6723434], [-53882, 6723665], [-54279, 6723854], [-54428, 6724049], [-54489, 6724230], [-54385, 6724469], [-54502, 6724855], [-55070, 6725364], [-55186, 6725991], [-55349, 6726211], [-55427, 6726501], [-55529, 6726547], [-55506, 6726670], [-55610, 6726720], [-55500, 6727125], [-55758, 6728153], [-55686, 6728352], [-55329, 6728323], [-55249, 6728551], [-55574, 6729721], [-55472, 6729820], [-55542, 6730112], [-55424, 6730675], [-55146, 6731471], [-55304, 6731796], [-55577, 6731905], [-55679, 6732088], [-55663, 6732366], [-55475, 6732564], [-55396, 6732903], [-55694, 6733285], [-55562, 6733605], [-55279, 6733815], [-54941, 6733599], [-54718, 6733637], [-54308, 6732919], [-53065, 6732047], [-52198, 6731115], [-50888, 6730325], [-49969, 6730868], [-49598, 6731639], [-49343, 6731617], [-49045, 6731719], [-48789, 6731692], [-47476, 6731169], [-46378, 6731065], [-45767, 6730596], [-44979, 6730484], [-44468, 6730524], [-43713, 6730842], [-43011, 6730935], [-42523, 6731246], [-42030, 6731313], [-41368, 6731590], [-40691, 6731945], [-40049, 6732645], [-38875, 6732945], [-37828, 6733645], [-37658, 6733405], [-37066, 6734187], [-36351, 6734704], [-35599, 6734974], [-35252, 6735389], [-33994, 6734774], [-33877, 6734632], [-32965, 6734476], [-32491, 6734661], [-31782, 6734745], [-31324, 6734996], [-31015, 6734992], [-30777, 6735090], [-30470, 6735055], [-30521, 6735169], [-30375, 6735669], [-29861, 6735721], [-29872, 6735980], [-29696, 6736030], [-29428, 6735943], [-29307, 6736160], [-29122, 6736009], [-28993, 6735748], [-28646, 6735621], [-28517, 6735919], [-28441, 6735875], [-28330, 6735953], [-28039, 6736587], [-27814, 6737915], [-27978, 6738023], [-27895, 6738174], [-27798, 6738194], [-27592, 6738028], [-27120, 6738287], [-26628, 6738414], [-26347, 6738661], [-26127, 6738702], [-26074, 6738567], [-25483, 6738877], [-25210, 6738372], [-24468, 6739000], [-24407, 6739025], [-24367, 6738892], [-23755, 6739308], [-23615, 6739124], [-23139, 6739394], [-23503, 6740129], [-23359, 6740238], [-23150, 6740065], [-22891, 6740425], [-22512, 6740282], [-22637, 6740698], [-22250, 6740706], [-22153, 6740354], [-21691, 6740372], [-21893, 6739865], [-21432, 6739733], [-21269, 6739580], [-20905, 6740295], [-20684, 6740408], [-20270, 6740425], [-19671, 6741053], [-19704, 6741157], [-19530, 6741141], [-19518, 6741295], [-19200, 6741231], [-18213, 6742902], [-18200, 6743928], [-17588, 6743771], [-17061, 6743523], [-16628, 6743462], [-15070, 6744038], [-13559, 6744009], [-13132, 6744084], [-12217, 6744567], [-11672, 6744599], [-10551, 6744287], [-9341, 6744260], [-8794, 6744071], [-7385, 6743161], [-6904, 6743011], [-6301, 6743007], [-5755, 6743106], [-5475, 6743238], [-5256, 6743093], [-4861, 6743027], [-3410, 6742928], [-2201, 6742678], [-1232, 6742627], [-1149, 6741867], [-1270, 6740900], [-1175, 6740521], [-1279, 6739562], [-993, 6738953], [-1313, 6737621], [-1365, 6736410], [-1026, 6736464], [-818, 6736398], [-940, 6736100], [-912, 6735940], [-508, 6735927], [-444, 6735780], [-55, 6735958], [119, 6735609], [1102, 6735553], [1939, 6735339], [2529, 6735493], [2570, 6734883], [2801, 6734807], [2753, 6734568], [2865, 6734318], [2659, 6733642], [2429, 6733290], [3237, 6732623], [3398, 6732296], [3649, 6732108], [4180, 6731330], [4553, 6730931], [4865, 6731158], [5979, 6731398], [6035, 6731118], [5948, 6731050], [5789, 6731134], [5586, 6731059], [5397, 6730806], [5367, 6730489], [5446, 6730553], [5859, 6730275], [6965, 6729386], [7126, 6729416], [7343, 6729254], [8108, 6728961], [8813, 6729384], [9404, 6729261], [9701, 6728922], [9899, 6728991], [9978, 6729110], [10306, 6729232], [10227, 6729593], [10314, 6729820], [10557, 6730053], [10273, 6730554], [10917, 6730885], [11151, 6730402], [11512, 6730532], [11559, 6730371], [12204, 6730624], [12992, 6731154], [13203, 6730875], [13281, 6730876], [13826, 6731259], [14037, 6731642], [14347, 6731831], [14381, 6731965], [15151, 6732352], [17356, 6732302], [18422, 6732145], [18802, 6731961], [19515, 6732349], [20082, 6732508], [20106, 6732735], [20175, 6732751], [20348, 6732733], [20698, 6732490], [20705, 6732696], [20969, 6732677], [21084, 6732511], [21130, 6732621], [21682, 6732731], [22299, 6732591], [22666, 6732634], [23206, 6732904], [23628, 6732958], [24217, 6733337], [24721, 6733522], [24945, 6733811], [26422, 6732436], [28141, 6731245], [28686, 6730663], [28754, 6730448], [29196, 6729853], [29400, 6729712], [29425, 6729525], [29290, 6729433], [29130, 6729458], [28729, 6729287], [28720, 6729001], [28626, 6729004], [28567, 6728767], [28299, 6728548], [28276, 6728407], [28719, 6728347], [29196, 6728125], [30043, 6728045], [30094, 6727639], [29982, 6727274], [30200, 6726155], [31395, 6724328], [31736, 6723486], [31921, 6723367], [31916, 6723016], [32315, 6721725], [34847, 6721997], [35098, 6720568], [35448, 6720379], [35499, 6720094], [35851, 6719917], [35879, 6719663], [36196, 6719713], [36492, 6719343], [36510, 6718908], [36676, 6718550], [36613, 6718420], [36896, 6718439], [37170, 6717821], [37106, 6717601], [37183, 6717465], [36895, 6717383], [36912, 6717518], [35793, 6717465], [33476, 6717152], [33491, 6717041], [33085, 6716957], [33146, 6716537], [31366, 6716291], [30762, 6716110], [30135, 6716139], [29538, 6715970], [29543, 6714683], [29695, 6714604], [29689, 6714389], [29682, 6714325], [29501, 6714315], [29417, 6714090], [29353, 6713415], [28977, 6713505], [28824, 6713396], [28257, 6713418], [27925, 6715374], [27715, 6715348], [27705, 6715122], [27640, 6715147], [27421, 6714965], [27506, 6714707], [27367, 6714425], [27035, 6714582], [26832, 6714263], [26797, 6714012], [27195, 6713881], [27263, 6713574], [27155, 6713499], [26738, 6713680], [26402, 6713677], [26844, 6712677], [26714, 6712554], [26751, 6712143], [26884, 6712119], [26930, 6711643], [26717, 6711597], [26700, 6711521], [25987, 6711412], [25229, 6711397], [25161, 6711271], [25227, 6711022], [25600, 6710106], [24969, 6709739], [24892, 6709845], [24674, 6709828], [23936, 6709590], [23719, 6709329], [23592, 6708618], [23439, 6708475], [23414, 6707694], [24126, 6707544], [24903, 6707050], [24508, 6706645], [24310, 6706699], [24147, 6706627], [24097, 6706071], [23552, 6705766], [23586, 6705449], [23244, 6705027], [23541, 6704564], [23420, 6704078], [23445, 6703513], [23113, 6703332], [22628, 6702846], [22550, 6702382], [22691, 6702352], [22640, 6702061], [22418, 6701971], [22290, 6701747], [22043, 6701612], [21817, 6701602], [21806, 6701706], [21702, 6701607], [21487, 6701587], [21345, 6701404], [21263, 6701066], [21023, 6701128], [20976, 6701036], [20888, 6701050], [20869, 6700725], [20514, 6700328], [20158, 6700244], [20136, 6700126], [19990, 6700054], [19896, 6700118], [19594, 6699855], [19242, 6700076], [18556, 6698613], [18573, 6698059], [18490, 6697966], [18556, 6697942], [18299, 6697465], [17889, 6697653], [17793, 6697569], [17709, 6697751], [17352, 6697868], [17288, 6697528], [17117, 6697269], [17047, 6696340], [16827, 6696003], [17214, 6695653], [17154, 6695526], [16815, 6695500], [16826, 6695045], [16604, 6694576], [16670, 6694437], [17118, 6694367], [17024, 6693910], [16621, 6693988], [16552, 6693807], [16836, 6693529], [17000, 6693489], [17282, 6693065], [17502, 6692559], [17558, 6692026], [17698, 6691611], [18077, 6691017], [17619, 6690972], [16446, 6691072], [16423, 6690957], [16680, 6690728], [16548, 6690335], [16749, 6689862], [16676, 6689657], [16739, 6688983], [16654, 6688983], [16655, 6688805], [16824, 6688770], [16806, 6688625], [17058, 6688438], [16980, 6687938], [16891, 6687975], [16653, 6687644], [16832, 6687395], [16712, 6687033], [16927, 6686951], [16878, 6686716], [16635, 6686856], [16391, 6686466], [16514, 6686358], [16147, 6685731], [16084, 6685392], [16185, 6685282], [16124, 6684943], [16241, 6684906], [15989, 6683978], [15905, 6683914], [15876, 6683571], [15694, 6683466], [15727, 6683357], [15533, 6683176], [15434, 6682979], [15522, 6682902], [15392, 6682920], [15273, 6682704], [15162, 6682716], [15246, 6682402], [14669, 6682639], [14657, 6682583], [13939, 6682703], [13608, 6682488], [13186, 6682397], [13050, 6682221], [12989, 6681890], [13056, 6681619], [13188, 6681654], [13249, 6681423], [13169, 6681373], [13360, 6680720], [13546, 6680524], [13124, 6679986], [13125, 6679816], [13065, 6679783], [12985, 6679876], [12885, 6679788], [12714, 6679412], [12262, 6679526], [12218, 6679285], [11938, 6679435], [11678, 6679415], [11493, 6679162], [11220, 6679089], [11152, 6678820], [10707, 6678325], [9772, 6677794], [9465, 6677386], [9534, 6677166], [9470, 6676776], [9303, 6676407], [9434, 6676019], [9360, 6675966], [9449, 6675609], [9219, 6675536], [9510, 6674981], [9611, 6674563], [10141, 6673956], [9937, 6673836], [9539, 6673302], [9081, 6673079], [8167, 6673038], [7521, 6672821], [6530, 6672639], [6239, 6673179], [6055, 6673124], [5654, 6673462], [5091, 6673465], [4983, 6673302], [4720, 6673228], [4931, 6674280], [4797, 6674364], [4709, 6674875], [4625, 6675063], [4555, 6675017], [3663, 6675872], [3371, 6675522], [3114, 6675367], [2765, 6674916], [2627, 6674480], [2332, 6673959], [2126, 6673052], [1671, 6673070], [934, 6676378], [1152, 6677407], [733, 6677321], [255, 6679722], [-56, 6679658], [-187, 6679931], [-792, 6680534], [-972, 6680571], [-1224, 6680510], [-1187, 6680426], [-1323, 6680391], [-1514, 6680148], [-1595, 6679841], [-1774, 6680235], [-1979, 6680398], [-2288, 6681149], [-2455, 6681319], [-2890, 6681401], [-3648, 6681201], [-4218, 6681427], [-4432, 6681163], [-4672, 6680555], [-5182, 6680496], [-5595, 6680346], [-5686, 6680026], [-5427, 6679647], [-5329, 6679029], [-5540, 6679033], [-5707, 6678707], [-5711, 6678530], [-6109, 6678318], [-6262, 6678391], [-6500, 6678163], [-6752, 6678106], [-7134, 6677844], [-7796, 6677897], [-7906, 6678314], [-8780, 6678054], [-8775, 6677763], [-8927, 6677707], [-9054, 6677522], [-9311, 6677490], [-9440, 6677358], [-9116, 6676778], [-9121, 6676429], [-9638, 6676110], [-9888, 6675818], [-9867, 6675462], [-9986, 6675241], [-10099, 6675237], [-10149, 6675137], [-10149, 6674795], [-10507, 6674642], [-10655, 6674798], [-10840, 6674731], [-10789, 6674552], [-10500, 6674418], [-12362, 6673154], [-12782, 6673186], [-12757, 6673025], [-13010, 6672673], [-13111, 6672235], [-13836, 6672176], [-14033, 6672465], [-14057, 6672669], [-14531, 6673307], [-14634, 6673591], [-14595, 6673727], [-14965, 6674244], [-15176, 6674224], [-15286, 6674672], [-15680, 6674453], [-15900, 6674529], [-15981, 6674757], [-16211, 6674502], [-16526, 6674658], [-16642, 6674658], [-16677, 6674569], [-17072, 6674832], [-17290, 6674760], [-17559, 6675321], [-17200, 6675681], [-17495, 6675727], [-17178, 6676370], [-17625, 6676489], [-17496, 6676917], [-17764, 6677579], [-17865, 6677537], [-17942, 6677653], [-18020, 6678028], [-17415, 6678342], [-17659, 6678803], [-17878, 6678672], [-18277, 6679170], [-18208, 6679201], [-18297, 6679542], [-18066, 6679678], [-18154, 6679923], [-18932, 6679782], [-18913, 6679920], [-19243, 6679878], [-19385, 6680448], [-20260, 6681275], [-20857, 6681797], [-21965, 6682298], [-22397, 6681637], [-22520, 6681673], [-23714, 6680863], [-23589, 6680465], [-23833, 6679938], [-24034, 6679851], [-24595, 6679851], [-25515, 6680925], [-25584, 6681038], [-25250, 6681281], [-24946, 6681665], [-24853, 6681636], [-24744, 6681740], [-24791, 6681805], [-24689, 6681897], [-24186, 6682261], [-24243, 6682661], [-24537, 6683693], [-24723, 6683676], [-24795, 6684703], [-25255, 6685685], [-25959, 6686294], [-26029, 6686171], [-26388, 6686452], [-26816, 6686477], [-26845, 6686339], [-27318, 6686443], [-27229, 6686905], [-27229, 6687681], [-27277, 6688795], [-27394, 6688822], [-27678, 6688794], [-28228, 6688572], [-28767, 6688605], [-29071, 6688717], [-29218, 6688299], [-29464, 6688008], [-30298, 6687451], [-30504, 6687122], [-30706, 6687008], [-30787, 6686793], [-31149, 6686617], [-31624, 6686139], [-32091, 6685593], [-31735, 6685438], [-31946, 6685111], [-32168, 6684992], [-32403, 6684609], [-32606, 6683863], [-33304, 6683149], [-33542, 6682601], [-33828, 6682237], [-33999, 6681565], [-33937, 6681220], [-34029, 6680839], [-34613, 6680302], [-34920, 6680128], [-35542, 6679486], [-36094, 6679279], [-36545, 6679246], [-36748, 6679433], [-36817, 6679672], [-36634, 6679923], [-36701, 6680368], [-36619, 6681699], [-36452, 6682371], [-36530, 6682377], [-36792, 6683158], [-36515, 6683820], [-36037, 6684226], [-35615, 6685156], [-35429, 6685847], [-35400, 6687058], [-35280, 6687525], [-34990, 6687832], [-34361, 6687977], [-34272, 6688497], [-34216, 6688500], [-34341, 6688878], [-34426, 6688868], [-34577, 6689638], [-34706, 6689820], [-34603, 6689892], [-34700, 6690114], [-34862, 6690364], [-35172, 6690150], [-35265, 6690318], [-34967, 6690611], [-35259, 6691095], [-35366, 6691227], [-35604, 6691035], [-36133, 6690840], [-36493, 6690900], [-37905, 6692895], [-38270, 6693067], [-38950, 6693602], [-39531, 6694107], [-39558, 6694275], [-39969, 6694477], [-40565, 6694438], [-41539, 6693891], [-42090, 6693764], [-42674, 6693880], [-42722, 6694162], [-43323, 6694198], [-43447, 6694915], [-42983, 6694905], [-43158, 6695806], [-43041, 6695940], [-43566, 6696343], [-43889, 6696495], [-44281, 6696560], [-45186, 6696402], [-45467, 6696610], [-45530, 6696899], [-45738, 6697237], [-45985, 6697328], [-45914, 6697494], [-46125, 6697585], [-46065, 6697725], [-46520, 6697895], [-46453, 6698054], [-46652, 6698132], [-46913, 6698084], [-47144, 6697868], [-47587, 6697857], [-47626, 6697578], [-47803, 6697603], [-47816, 6697496], [-48281, 6697563], [-48979, 6697823], [-48953, 6698536], [-49840, 6698604], [-49681, 6699496], [-50814, 6699159], [-50694, 6699875], [-50922, 6700032], [-50924, 6701120], [-51372, 6701103], [-51354, 6701710], [-51189, 6701683], [-51128, 6701768], [-51056, 6702411], [-51349, 6702572], [-52716, 6702825], [-53113, 6703308], [-54086, 6703304], [-54503, 6703388], [-54793, 6703600], [-54976, 6703556], [-55450, 6704218], [-56076, 6704446], [-56359, 6704447], [-56474, 6704305], [-56637, 6704337], [-56804, 6704410], [-56740, 6704709]  ] ]; //gla polygon

var g = new esri.geometry.Polygon({"rings": rings, "spatialReference": new esri.SpatialReference({wkid: 3857 }) });
gl.on(click_event, function() {swal("Outside London", "We only show Planning Permission data within the boundaries of Greater London.");}); gl.add(new Graphic(g, fill)); return gl;}
function polygon_hover(e) {if (e.graphic == last_graphic_hover) return; last_graphic_hover = e.graphic; move_to_front(e.graphic);}
function zoom_to_graphic(g, foo) {var point=g.geometry.getCentroid();point.x += panel_padding(g.geometry.getExtent());current_zoom= map.getZoom();did_zoom= false;//map.graphics.clear();map.centerAndZoom(point, zoom);
    map.setExtent(pad_extent_by_panel(g.geometry.getExtent()), !is_mobile()).then(function() {if (current_zoom != map.getZoom()) did_zoom = true; if (typeof foo != 'undefined') foo(); }); }
function do_filter() {setTimeout(function() {var filters=[]; $("#lddfilters > div")
.each(function() { var field_filter = []; var field_name = $(this).attr("name");
    var checked_boxes = $(this).find(":checkbox:checked:visible");  $(this).toggleClass("something_selected", checked_boxes.length >= 1);
    checked_boxes.each(function() { var name = $(this).attr("name");
        if (field_name == "mapclass" && types[name] && !("group" in types[name])) { //Is group parent
            for (var i in types) { if (types[i].group == name) { field_filter.push(field_name + "='" + i + "'"); } } } else {field_filter.push(field_name +"='"+ (name || $(this).next("span").html()) +"'");} });
    if (field_filter.length > 0) filters.push(field_filter.join(" OR ")); });  has_filters = filters.length > 0; $("#footer").toggleClass("filters", has_filters);
            var new_query = filters.length == 0 ? "" : "(" + filters.join(") AND (") + ")";  db(new_query); locations.setDefinitionExpression(new_query); refresh_counters(3);  map.infoWindow.hide();
			}, 1); //timeout to remove code from flow, allowing css to update instantly, giving speedier feel
}
function init_export(d) {if (is_mobile()) swal("Requires a Desktop", "To export this data to a spreadsheet, please return to this page on a PC.");
	var where = $("#ward_title").html().replace(/(<([^>]+)>)/ig, "").replace(/\r?\n|\r/ig, "").replace(/ +/g, " ").replace(/\&gt\;/g, " > ");
	var out = [ ["Planning Permission | All London fo us"], [where], [] ];var ignore = ["ESRI_OID"]; var headers = [];//Field Headers
	for (var i in d.features[0].attributes) {if ($.inArray(i, ignore) == -1) {headers.push(get_alias(d.features[0].attributes[i])); }}
	out.push(headers); //Data
	for (var i in d.features) {var row = []; for (var j in d.features[i].attributes) { if ($.inArray(j, ignore) == -1) {row.push(d.features[i].attributes[j]); }  }
		out.push(row);  }
	exportToCsv("data.csv", out); }
function in_advanced_mode() {return $("#type_groups").hasClass("advanced"); }  function pad_extent_by_panel(ext) {return ext.offset(panel_padding(ext), 0); }
function panel_padding(ext) {if (is_mobile()) return 0;  var doc_width = $(document).width();  var panel_percent_shift = doc_width > 1400 ? 25 : 50;
    var panel = screenUtils.toMapGeometry(ext, doc_width, $(document).height(),  new esri.geometry.Extent(
        $("#panel").position().left, $("#panel").position().top, $("#panel").position().left + $("#panel").width(), $("#panel").position().top + $("#panel").height(), ext.spatialReference )    );
    var x_pad = (panel.xmin - panel.xmax) / (100 / panel_percent_shift); return x_pad;}
function hover_pin(e, hover) { engorge_pin(e, false); //Do this always in case it's first time (transition from css not set is funky)
    if (hover) {move_to_front(e.graphic);  engorge_pin(e, true); }  }
function engorge_pin(e, bigger) { var do_scale = 1.25; /*if (isIE) {if (do_scale) e.graphic.setSymbol( bigger ? pin.img_large_ie : pin.img );} else {*/ //if (do_scale) e.graphic.setSymbol(pin.img_large);
    if (bigger) {if (!do_scale) do_scale = 1;  $(e.target).css("transformOrigin"); //Just accessing this property somehow allows it to work properly!
        $(e.target).attr("class", "animate fast"); //+(pin.key=="selected"?"":" fast"));
        $(e.target).css({transform: $(e.target).attr("transform") + " scale(" + do_scale + "," + do_scale + ")"  }); } 
    else {var mapclass = e.graphic.attributes["mapclass"]; var width = !in_advanced_mode() && types[mapclass].group ? types[types[mapclass].group].width : types[mapclass].width;
        var height = !in_advanced_mode() && types[mapclass].group ? types[types[mapclass].group].height : types[mapclass].height;
        var current_class = $(e.target).attr("class") || ""; $(e.target).attr("class", current_class.replace("fast", ""));
        $(e.target).css({transform: $(e.target).attr("transform"), transformOrigin: ($(e.target).attr("x") * 1 + width / 2) + "px " + ($(e.target).attr("y") * 1 + height + 5) + "px"  });  }    //}
}
function move_to_front(g) {var shape = g.getDojoShape(); if (shape) shape.moveToFront();
    if (g.attributes && g.attributes.me) {var shape = g.attributes.me.getDojoShape(); if (shape) shape.moveToFront(); } }
function make_renderer() {var types=get_types(); var renderer=new UniqueValueRenderer(new PictureMarkerSymbol("images/icons/misc.svg", 22, 23), 
									function(g) {return in_advanced_mode() ? g.attributes.mapclass : types[g.attributes.mapclass].group;});
    var icon, width, height;
    for (var name in types) {if (types[name].icon) { //If value shows name of another icon. Can override its dimensions, or use original
                icon = types[name].icon; width = types[name].width ? types[name].width : types[icon].width; height = types[name].height ? types[name].height : types[icon].height;
            } else { icon = name;   width = types[name].width;   height = types[name].height; }
							renderer.addValue(name, new PictureMarkerSymbol("images/icons/" + icon + ".svg", width, height));}
return renderer;}
function create_map() {map = new Map("mapDiv", {extent: pad_extent_by_panel(london()), basemap: create_basemaps({css: { top: "95px" }  }), maxZoom: 18, slider: false,  logo: false,       //showLabels : true,
showInfoWindowOnClick: false   });
map.on("load", function() {show_loader(true);$("#panel").addClass("ready"); $("#buttons").css("display", "block"); $("#notifier").css("display", "block");resize_panel(); saved_queries=store('ldd_queries') || {};});
map.on("mouse-out", function() {last_borough_hover = false; }); map.on("zoom-start", function() {last_zoom = map.getZoom();  });
map.on("zoom-end", function() {//Click borough/ward triggers the check anyway, so don't repeat  //check_zoom_cases("zoom event");   //var change = check_zoom_cases("zoom event");
    zoomed_in = map.getZoom() > last_zoom;
    if (( /*last_zoom>map.getZoom() && */ !is_borough_zoom)) {         //	setTimeout(function() {
	db(last_zoom, map.getZoom(), is_borough_zoom);  check_zoom_cases("zoom event");}//if ((/*last_zoom>map.getZoom() && */!is_borough_zoom)) {refresh_counters(7);  //check_zoom_cases("zoom event");  //}, 100);
    map.infoWindow.hide();  });  return map;} 
function at_borough_level() {return zoom_level == "boroughs";} // && !is_borough_zoom;
function check_zoom_cases(msg) {var old_zoom_level = zoom_level;var ward_level = 13; var points_level = 15; var zoom = map.getZoom();   $("body").toggleClass("zoomed_in", false);
var set = [], layers = [single_ward, locations, wards, boroughs, gla_boundary];  //if (!white_background) layers.push(gla_boundary);
var do_show_points = !!is_ward_zoom || (zoomed_in && old_zoom_level == "points");
        if ((zoom >= points_level && !is_borough_zoom) || do_show_points) {set = [true, true, false, false]; var oid = is_ward_zoom ? is_ward_zoom : "999";  map.graphics.clear();
            $("#export_button").toggleClass("available", do_show_points);
            if (zoom_level != "points") { /*i.e. last zoom level */ single_ward.setDefinitionExpression("objectid_1=" + oid);} else {is_ward_zoom = true;}
            zoom_level = "points";
        } else if (map.getZoom() >= ward_level || is_borough_zoom) { //TODO: If ward already showing, and zooming in, keep showing it.
            set = [false, false, true, true, true];    //if (!white_background) set.push(true);
            $("body").toggleClass("zoomed_in", true);
            if (!polygons_visible()) { //@todo: Wait until an update-end occurs to test for this
                goto_biggest_borough_on_screen();}
            //wards.setMaxAllowableOffset();
            zoom_level = "wards";
            //If it's already been selected & it's just being turned back on (by zooming in), there won't be an event to trigger refresh_counters
            if (!is_borough_zoom) refresh_counters("check zoom");
        } else {set = [false, false, false, true];  zoom_level = "boroughs";  if (!is_borough_zoom) refresh_counters("check zoom2"); }
        $("#notifier #extra").css("display", (zoom_level != "points" || is_ward_zoom) ? "inline-block" : "none");  $("#notifier").attr("class", zoom_level);
        $("#lddfilters").toggleClass("hide_legend", zoom_level != "points"); for (var x = 0; x < layers.length; x++) {layers[x].setVisibility(set[x]) }   //refresh_counters(4);
        is_borough_zoom = false; is_ward_zoom = false; return old_zoom_level != zoom_level;}

    function polygons_visible() {for (var x = 0; x < wards.graphics.length; x++) {if (map.extent.contains(wards.graphics[x].geometry) || map.extent.intersects(wards.graphics[x].geometry)) return true; }
        return false;}
    function goto_biggest_borough_on_screen() {if (last_borough_hover) {borough_click(last_borough_hover.srcElement, last_borough_hover.graphic, last_borough_hover.graphic.attributes.gss_code, true);
        } else {var min = false; var selected = false; var map_center = map.extent.getCenter();
            for (var x = 0; x < boroughs.graphics.length; x++) {var point = boroughs.graphics[x].geometry.getCentroid();
                var distance = Math.sqrt(Math.pow(Math.abs(point.x - map_center.x), 2) + Math.pow(Math.abs(point.y - map_center.y), 2));
                if (!min || distance < min) { min = distance; selected = boroughs.graphics[x];  }         }
            borough_click(false, selected, selected.attributes.gss_code, true);        }    }

    function getTextContent(graphic) {var a = graphic.attributes; var out = "";for (var i in a) {if ($.inArray(i, ["mapclass", "ESRI_OID"]) === -1) {out += row(a, i);} }
        if (is_mobile()) {$("#back_to_map #content").html(out); $("body").addClass("showinfo"); hash.update("point"); }
        return out; }
    function setup_hash() {var hash = {init: function() {if (!is_mobile()) return;
                window.onhashchange = function() {if (!hash.updating) {if ($("body").hasClass("showinfo")) {go_back_to_map();} else if ($("body").hasClass("min")) {minimise(false); } }}   },
            updating: false,  update: function(b) {if (!is_mobile()) return; window.location.hash = b; hash.updating = true;  setTimeout(function() {hash.updating = false; }, 50); } }
        hash.init();  return hash;    }

    function row(attr, field, label, is_link) {  label = get_alias(field); var val = (attr[field] ? attr[field] : "TBC");  if (field == "apptype") val = val.substring(2).replace(/ - /gi, ", ");
        if (field == "borough") {if (BorLink[val][1]) { val = "<a target='_NEW' href='" + BorLink[val][1] + "' title='" + val + " planning website'>" + val + "</a>";  }   }
        if (val) {return "<div><v>" + label + ":</v><e>" + val + "</e></div>";} else {return "";}    }
    function is_touch_device() { return 'ontouchstart' in window // works on most browsers
            ||  navigator.maxTouchPoints; // works on IE10/11 and Surface
    };
    function get_alias(column) {for (var i in locations.fields) { if (locations.fields[i].name == column) {if (locations.fields[i].alias != column) return locations.fields[i].alias;  else break; }   }
        return toTitleCase(column.replace(/_/g, " ")); }
    function check_network() {if (!connection_exists()) {swal("No Internet Connection", "Please reconnect and try again.", "warning"); /*Can't do connection icon, because there's no connection to download it! */} }
    function connection_exists() {var xhr = new XMLHttpRequest();var file = "https://maps.london.gov.uk/utils/connection-test/blank.gif"; var randomNum = Math.round(Math.random() * 10000);
        xhr.open('HEAD', file + "?rand=" + randomNum, false); try {xhr.send(); return (xhr.status >= 200 && xhr.status < 304);} catch (e) {return false;}  }
    function show_loader(b) {clearTimeout(loader_timeout); if (b) {loader_timeout = setTimeout(function() {$("body").addClass("loading");}, 100);} else {$("body").removeClass("loading"); }  }
    function westminster() {return new esri.geometry.Extent(-24784, 6706222, -8732, 6714744, new esri.SpatialReference({wkid: 3857}));}
    function london() {return new esri.geometry.Extent(-58192, 6673624, 29556, 6744328, new esri.SpatialReference({wkid: 3857})); }
    function get_dropdown_val(id) {var elem = did(id);return elem.value || elem.options[elem.selectedIndex].text;} //for ie
    function toTitleCase(str) {return str.replace(/\w\S*/g, function(txt) {return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});}
    function unique(array) {return $.grep(array, function(el, index) {return index === $.inArray(el, array);});}
    function ordinal(n) {var s = ["th", "st", "nd", "rd"],v = n % 100;return n + (s[(v - 20) % 10] || s[v] || s[0]); }
    function did(id) {return document.getElementById(id);}
    function exportToCsv(filename, rows) {var processRow = function(row) {var finalVal = '';
            for (var j = 0; j < row.length; j++) {var innerValue = row[j] === null ? '' : row[j].toString(); if (row[j] instanceof Date) {innerValue = row[j].toLocaleString();};
                var result = innerValue.replace(/"/g, '""');if (result.search(/("|,|\n)/g) >= 0) result = '"' + result + '"'; if (j > 0) finalVal += ','; finalVal += result; }
            return finalVal + '\n'; };
        var csvFile = ''; for (var i = 0; i < rows.length; i++) {csvFile += processRow(rows[i]); }
        var blob = new Blob([csvFile], {type: 'text/csv;charset=utf-8;' }); if (navigator.msSaveBlob) { navigator.msSaveBlob(blob, filename); } // IE 10+
		else {var link = document.createElement("a"); if (link.download !== undefined) { // feature detection      // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob); link.setAttribute("href", url); link.setAttribute("download", filename); link.style.visibility = 'hidden'; document.body.appendChild(link);  link.click();
                document.body.removeChild(link); }  } }
    var check_auto_borough_once = true;

    function check_auto_borough() { if (!check_auto_borough_once) return; check_auto_borough_once = false;  var hash = location.hash.substring(1);   if (hash == "city-london") hash = "city-of-london";
        var borough_names = ["bexley", "brent", "bromley", "camden", "city-of-london", "croydon", "ealing", "enfield", "greenwich", "hackney", "hammersmith-and-fulham", "haringey", "harrow", "havering", "hillingdon", "hounslow", "islington", "kensington-and-chelsea", "kingston-upon-thames", "lambeth", "lewisham", "merton", "newham", "redbridge", "richmond-upon-thames", "southwark", "sutton", "tower-hamlets", "waltham-forest", "wandsworth", "westminster"]; if ($.inArray(hash, borough_names) != -1) {window.location.hash = "";
            for (var i in boroughs.graphics) {if (hash == boroughs.graphics[i].attributes.name.toLowerCase().replace(/ /g, "-")) {borough_click(false, boroughs.graphics[i], boroughs.graphics[i].attributes.gss_code); }} }
    }

    function context_layers() {if (last_context) {map.removeLayer(last_context);last_context = false; }
        var layer = $("#context select").val(); $("#context").toggleClass("selected", layer != -1); $("#context option[value=-1]").html(layer == -1 ? "Context Layers" : "--- Clear Context ---");
        if (layer != -1) {var resource_location; if (layer == "opportunity_areas") {resource_location = "https://maps.london.gov.uk/gla/rest/services/LIDB_2050/2050_planning_policy/MapServer/5";
            } else {resource_location = "https://maps.london.gov.uk/gla/rest/services/apps/ldd_supporting_layers_02/MapServer/" + layer; }
            last_context = new FeatureLayer(resource_location, {id: "context", outFields: ["*"], opacity: context_opacity.current_val(), maxAllowableOffset: pixel_size() / 4 });
            last_context.on("mouse-over", function(e) { move_to_front(e.graphic); });
            last_context.on(click_event, function(e) {swal($("#context select option:selected").text(), e.graphic.attributes[e.graphic._layer.displayField]);});  map.addLayer(last_context); }
    }

    function create_transparency_control(div, layers, default_val, is_advanced) {
        var transparency = {val: default_val, visible: false, dragging: false, min_val: 0,
            toggle: function() {transparency.visible = !transparency.visible; $(div).css("display", transparency.visible ? "block" : "none"); $(div).parent().attr("class", transparency.visible ? "menu" : ""); },
            start_drag: function(e) {transparency.check_event(e); $("body").addClass("noselect").on("mousemove", transparency.move); transparency.dragging = true;
                $(window).on("mouseup", function() {transparency.dragging = false; $("body").removeClass("noselect").off("mousemove", transparency.move);  });         },
            move: function(e) {if (transparency.dragging) {transparency.check_event(e); }       },
            check_event: function(e) {var perc = (e.pageX - $(div).offset().left) / $(div).width(); if (perc < 0) perc = 0;  else if (perc > 1) perc = 1; transparency.set(perc); },
            set: function(val) {transparency.val = val; $(div + " > div ").css("width", (val * 100) + "%"); for (var i in layers) layers[i].setOpacity(transparency.get());    },
            get: function() {return transparency.min_val + (1 - transparency.min_val) * transparency.val;},
            init: function() { $(div + " > div").css("width", (default_val * 100) + "%"); $(div).mousedown(transparency.start_drag);for (var i in layers) layers[i].setOpacity(transparency.get()); }
        }
        transparency.init();  return transparency; }
    function resize_panel() {var h = $("#panel #content").height() - ($("#panel").offset().top + $("#panel").height() - $(window).height()) - (is_mobile() ? 0 : 25);;
        $("#panel #content").css((is_mobile() ? "" : "max-") + "height", h); }
function get_types() {return szUseClasses;  }

$(function() {$("#lddfilters input[type=checkbox]").change(do_filter); $("#context select").change(context_layers); resize_panel(); $(window).resize(resize_panel);  build_legend();
    $(document).click(function(e) {if (e.target.nodeName == "A" && $(e.target).attr("href").indexOf("mailto") != -1) {var t; $(window).blur(function() {clearTimeout(t); });
    t=setTimeout(function() {swal({title: "Copy This", text: "You can copy & paste this into an email.", type: "input", inputValue:"London Development Database: "+ $(e.target).attr('href').replace("mailto:", "") }); 
	$(".sweet-alert input[type=text]").select();  document.execCommand('copy');  }, 500);   }   });    }); });